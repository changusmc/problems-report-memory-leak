// Script to generate multi-module Android project for memory leak reproduction

def moduleCount = 20

// Create Android modules
moduleCount.times { i ->
    def moduleName = "module${i}"
    def moduleDir = new File(projectDir, moduleName)
    moduleDir.mkdirs()
    
    // Create build.gradle for Android library module
    def moduleBuildFile = new File(moduleDir, 'build.gradle')
    moduleBuildFile.text = """
plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.devtools.ksp'
    id 'kotlin-kapt'
}

android {
    namespace 'com.pinterest.memoryleak.${moduleName}'
    compileSdk 34

    defaultConfig {
        minSdk 24
        targetSdk 34
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    
    // KSP dependencies
    implementation 'com.google.dagger:dagger:2.51.1'
    ksp 'com.google.dagger:dagger-compiler:2.51.1'
    
    // KAPT dependencies for Java library
    implementation 'com.google.dagger:dagger:2.51.1'
    kapt 'com.google.dagger:dagger-compiler:2.51.1'
    
    // Add dependencies to create more resolution work
    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    
    // Add some Android-specific dependencies
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.7.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.7.6'
    implementation 'androidx.navigation:navigation-ui-ktx:2.7.6'
}

ksp {
    arg("moduleName", "${moduleName}")
}
"""
    
    // Create source directories
    def kotlinSrcDir = new File(moduleDir, 'src/main/kotlin')
    kotlinSrcDir.mkdirs()
    
    def javaSrcDir = new File(moduleDir, 'src/main/java')
    javaSrcDir.mkdirs()
    
    def resDir = new File(moduleDir, 'src/main/res/values')
    resDir.mkdirs()
    
    // Create Kotlin source file
    def kotlinFile = new File(kotlinSrcDir, "${moduleName.capitalize()}Activity.kt")
    kotlinFile.text = """
package com.pinterest.memoryleak.${moduleName}

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import com.google.dagger.Component
import javax.inject.Inject

@Component
interface ${moduleName.capitalize()}Component {
    fun inject(activity: ${moduleName.capitalize()}Activity)
}

class ${moduleName.capitalize()}Activity : AppCompatActivity() {
    
    @Inject
    lateinit var ${moduleName}Service: ${moduleName.capitalize()}Service
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_${moduleName})
        
        ${moduleName}Service.doSomething()
    }
}

class ${moduleName.capitalize()}Service @Inject constructor() {
    fun doSomething(): String {
        return "${moduleName} service is working"
    }
}
"""
    
    // Create Java source file for KAPT
    def javaFile = new File(javaSrcDir, "${moduleName.capitalize()}JavaClass.java")
    javaFile.text = """
package com.pinterest.memoryleak.${moduleName};

import com.google.dagger.Component;
import javax.inject.Inject;

@Component
public interface ${moduleName.capitalize()}JavaComponent {
    void inject(${moduleName.capitalize()}JavaClass javaClass);
}

public class ${moduleName.capitalize()}JavaClass {
    
    @Inject
    ${moduleName.capitalize()}JavaService javaService;
    
    public void doSomething() {
        javaService.performAction();
    }
}

class ${moduleName.capitalize()}JavaService {
    @Inject
    public ${moduleName.capitalize()}JavaService() {}
    
    public void performAction() {
        // Java service implementation
    }
}
"""
    
    // Create layout file
    def layoutFile = new File(moduleDir, 'src/main/res/layout/activity_${moduleName}.xml')
    layoutFile.text = """
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">
    
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="${moduleName} Activity" />
        
</LinearLayout>
"""
    
    // Create strings.xml
    def stringsFile = new File(resDir, 'strings.xml')
    stringsFile.text = """
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">${moduleName}</string>
</resources>
"""
}

println "Generated ${moduleCount} Android modules for memory leak reproduction"